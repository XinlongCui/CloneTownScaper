//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Stage3/IS_InputHandler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IS_InputHandler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IS_InputHandler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IS_InputHandler"",
    ""maps"": [
        {
            ""name"": ""AM_BuildAndDemolish"",
            ""id"": ""34333bbc-3b69-4c26-bf3d-e53147b46380"",
            ""actions"": [
                {
                    ""name"": ""Build"",
                    ""type"": ""Button"",
                    ""id"": ""062c76a4-b13d-408b-93a0-9976e9973c80"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Demolish"",
                    ""type"": ""Button"",
                    ""id"": ""addb0eab-bbcb-4596-96d3-8d3903cf34c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b5a2a75-028e-43dd-871f-8ea1e964abc9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0243af83-fe79-4b30-b14b-56666fbb3c20"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Demolish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AM_CameraMovement"",
            ""id"": ""1b70539e-8904-4292-bc88-5ff82cf90866"",
            ""actions"": [
                {
                    ""name"": ""CameraViewportMovement"",
                    ""type"": ""Value"",
                    ""id"": ""c4216423-47ec-403d-9c9e-f33f14b73f95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""90db9537-4469-41fa-a7ff-be7169268b8c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9296853a-1e7a-4c51-8789-c190cdcc1f1c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraViewportMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""e4c7f74f-7b73-435b-891e-badd62a79782"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d8e87cd-3e6c-40b0-b15e-44348c36beae"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a07c30a6-9361-48e5-94db-083e96e0bc3b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7db471be-17a9-4c10-ab8b-3cd86be67d4c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b114b7a8-8b6d-4f8d-b00d-a9b0f6cf217d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AM_BuildAndDemolish
        m_AM_BuildAndDemolish = asset.FindActionMap("AM_BuildAndDemolish", throwIfNotFound: true);
        m_AM_BuildAndDemolish_Build = m_AM_BuildAndDemolish.FindAction("Build", throwIfNotFound: true);
        m_AM_BuildAndDemolish_Demolish = m_AM_BuildAndDemolish.FindAction("Demolish", throwIfNotFound: true);
        // AM_CameraMovement
        m_AM_CameraMovement = asset.FindActionMap("AM_CameraMovement", throwIfNotFound: true);
        m_AM_CameraMovement_CameraViewportMovement = m_AM_CameraMovement.FindAction("CameraViewportMovement", throwIfNotFound: true);
        m_AM_CameraMovement_CameraMovement = m_AM_CameraMovement.FindAction("CameraMovement", throwIfNotFound: true);
    }

    ~@IS_InputHandler()
    {
        UnityEngine.Debug.Assert(!m_AM_BuildAndDemolish.enabled, "This will cause a leak and performance issues, IS_InputHandler.AM_BuildAndDemolish.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_AM_CameraMovement.enabled, "This will cause a leak and performance issues, IS_InputHandler.AM_CameraMovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AM_BuildAndDemolish
    private readonly InputActionMap m_AM_BuildAndDemolish;
    private List<IAM_BuildAndDemolishActions> m_AM_BuildAndDemolishActionsCallbackInterfaces = new List<IAM_BuildAndDemolishActions>();
    private readonly InputAction m_AM_BuildAndDemolish_Build;
    private readonly InputAction m_AM_BuildAndDemolish_Demolish;
    public struct AM_BuildAndDemolishActions
    {
        private @IS_InputHandler m_Wrapper;
        public AM_BuildAndDemolishActions(@IS_InputHandler wrapper) { m_Wrapper = wrapper; }
        public InputAction @Build => m_Wrapper.m_AM_BuildAndDemolish_Build;
        public InputAction @Demolish => m_Wrapper.m_AM_BuildAndDemolish_Demolish;
        public InputActionMap Get() { return m_Wrapper.m_AM_BuildAndDemolish; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AM_BuildAndDemolishActions set) { return set.Get(); }
        public void AddCallbacks(IAM_BuildAndDemolishActions instance)
        {
            if (instance == null || m_Wrapper.m_AM_BuildAndDemolishActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AM_BuildAndDemolishActionsCallbackInterfaces.Add(instance);
            @Build.started += instance.OnBuild;
            @Build.performed += instance.OnBuild;
            @Build.canceled += instance.OnBuild;
            @Demolish.started += instance.OnDemolish;
            @Demolish.performed += instance.OnDemolish;
            @Demolish.canceled += instance.OnDemolish;
        }

        private void UnregisterCallbacks(IAM_BuildAndDemolishActions instance)
        {
            @Build.started -= instance.OnBuild;
            @Build.performed -= instance.OnBuild;
            @Build.canceled -= instance.OnBuild;
            @Demolish.started -= instance.OnDemolish;
            @Demolish.performed -= instance.OnDemolish;
            @Demolish.canceled -= instance.OnDemolish;
        }

        public void RemoveCallbacks(IAM_BuildAndDemolishActions instance)
        {
            if (m_Wrapper.m_AM_BuildAndDemolishActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAM_BuildAndDemolishActions instance)
        {
            foreach (var item in m_Wrapper.m_AM_BuildAndDemolishActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AM_BuildAndDemolishActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AM_BuildAndDemolishActions @AM_BuildAndDemolish => new AM_BuildAndDemolishActions(this);

    // AM_CameraMovement
    private readonly InputActionMap m_AM_CameraMovement;
    private List<IAM_CameraMovementActions> m_AM_CameraMovementActionsCallbackInterfaces = new List<IAM_CameraMovementActions>();
    private readonly InputAction m_AM_CameraMovement_CameraViewportMovement;
    private readonly InputAction m_AM_CameraMovement_CameraMovement;
    public struct AM_CameraMovementActions
    {
        private @IS_InputHandler m_Wrapper;
        public AM_CameraMovementActions(@IS_InputHandler wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraViewportMovement => m_Wrapper.m_AM_CameraMovement_CameraViewportMovement;
        public InputAction @CameraMovement => m_Wrapper.m_AM_CameraMovement_CameraMovement;
        public InputActionMap Get() { return m_Wrapper.m_AM_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AM_CameraMovementActions set) { return set.Get(); }
        public void AddCallbacks(IAM_CameraMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_AM_CameraMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AM_CameraMovementActionsCallbackInterfaces.Add(instance);
            @CameraViewportMovement.started += instance.OnCameraViewportMovement;
            @CameraViewportMovement.performed += instance.OnCameraViewportMovement;
            @CameraViewportMovement.canceled += instance.OnCameraViewportMovement;
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
        }

        private void UnregisterCallbacks(IAM_CameraMovementActions instance)
        {
            @CameraViewportMovement.started -= instance.OnCameraViewportMovement;
            @CameraViewportMovement.performed -= instance.OnCameraViewportMovement;
            @CameraViewportMovement.canceled -= instance.OnCameraViewportMovement;
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
        }

        public void RemoveCallbacks(IAM_CameraMovementActions instance)
        {
            if (m_Wrapper.m_AM_CameraMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAM_CameraMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_AM_CameraMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AM_CameraMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AM_CameraMovementActions @AM_CameraMovement => new AM_CameraMovementActions(this);
    public interface IAM_BuildAndDemolishActions
    {
        void OnBuild(InputAction.CallbackContext context);
        void OnDemolish(InputAction.CallbackContext context);
    }
    public interface IAM_CameraMovementActions
    {
        void OnCameraViewportMovement(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
    }
}
